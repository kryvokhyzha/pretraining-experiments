[build-system]
requires = ["hatchling", "tomli"]
build-backend = "hatchling.build"

[project]
name = "pretraining-experiments"
version = "0.1.0"
description = "Set of experiments for LLM pretraining."
readme = "README.md"
authors = [{ name = "Roman Kryvokhyzha", email = "kriwohizha@gmail.com" }]
keywords = ["pretraining", "llm", "gemma"]
license = "mit"
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

requires-python = ">=3.11,<3.14"

dependencies = [
    "rootutils >= 1.0.7",
    "hydra-core == 1.3.2",
    "hydra-colorlog == 1.2.0",
    "rich ~= 13.9.2",
    "setuptools >= 75.6.0",
    "loguru ~= 0.7.3",
    "fire ~= 0.7.0",
    "joblib ~= 1.5.2",
    "huggingface_hub[cli,hf_xet] ~= 0.34.4",
    "hf-transfer ~= 0.1.9",
    "wandb ~= 0.21.4",
    "torch == 2.8.0",
    "accelerate == 1.10.1",
    "transformers == 4.56.1",
    "datasets == 4.0.0",
]

[dependency-groups]
dev = [
    {include-group = "lint"},
    {include-group = "test"},
    {include-group = "doc"},
    {include-group = "notebook"},
]
lint = [
    "pre-commit",
    "ruff",
]
test = [
    "pytest",
    "pytest-cov",
    "pytest-env",
    "pytest-asyncio",
]
doc = [
    "sphinx",
    "sphinx-pyproject",
]
notebook = [
    "notebook",
    "ipython",
    "ipywidgets",
]

[project.optional-dependencies]
aws = [
    "boto3 >=1.34.32,<2",
    "sagemaker >=2.156.0,<3",
    "s3fs >=2023.12.1"
]
tpu = [
    "torch-xla == 2.8.0",
]

[tool.uv.sources]
torch = [
  { index = "pytorch-cpu", marker = "sys_platform != 'linux'" },
  { index = "pytorch-cu128", marker = "sys_platform == 'linux'" },
]

[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[[tool.uv.index]]
name = "pytorch-cu128"
url = "https://download.pytorch.org/whl/cu128"
explicit = true

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.ruff]
line-length = 120
target-version = "py313"

[tool.ruff.lint]
select = ["E", "F", "W", "I", "D"]  # all rules can be found here: https://beta.ruff.rs/docs/rules/
ignore=[
    "E203",         # space before : (needed for how black formats slicing)
    "E731",         # do not assign a lambda expression, use a def
    "E741",         # do not use variables named 'l', 'O', or 'I'
    "F403",         # unable to detect undefined names
    "F401",         # imported but unused
    "D100",         # missing docstring in public module
    "D101",         # missing docstring in public class
    "D102",         # missing docstring in public method
    "D103",         # missing docstring in public function
    "D104",         # missing docstring in public package
    "D105",         # missing docstring in magic method
    "D107",         # missing docstring in `__init__`
    "D203",         # incorrect-blank-line-before-class
    "D213",         # multi-line-summary-second-line
]
exclude=[
    ".git",
    "__pycache__",
    ".ruff_cache",
    ".github",
    "build",
    "dist",
]

[tool.ruff.lint.per-file-ignores]
"scripts/python/*"=["E402"]

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.nbqa.config]
ruff = "pyproject.toml"

[tool.nbqa.addopts]
ruff = ["--extend-ignore=E402"]

[tool.nbqa.mutate]
ruff = 1

[tool.pytest.ini_options]
pythonpath = ["src", "."]
asyncio_default_fixture_loop_scope = "function"
